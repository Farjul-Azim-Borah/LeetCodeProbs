class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<int>> dp(n , vector<int>(n , 0));
        int maxLen = 1;
        int st = 0;
        for(int i = 0; i<n; ++i){
            dp[i][i] = 1;
            st = i;
        }
        for(int i = 0; i<n-1; ++i){
            if(s[i] == s[i+1]){
                dp[i][i+1] = 1;
                maxLen = 2;
                st = i;
            }
        }
        for(int j = 2; j<n; ++j){
            for(int i = 0; i<j; ++i){
                if((s[i] == s[j]) && (j-i == 1 || dp[i+1][j-1] == 1)){
                    dp[i][j] = 1;
                    if(maxLen < j-i+1){
                        maxLen = max(maxLen , j-i+1);
                        st = i;
                    }
                }
            }
        }
        cout<<maxLen;
        return s.substr(st, maxLen);
    }
};
